---
title: "Spatial Data"
format: html
editor: visual
---

```{r}
#| include: false
library(readr)
library(here)
library(sf)
library(ggplot2)
library(leaflet)
library(scales)
library(ggspatial)
library(dplyr)
```

# Loading Data

```{r}
knb_url <- "https://dev.nceas.ucsb.edu/knb/d1/mn/v2/object/urn%3Auuid%3Aaceaecb2-1ce0-4d41-a839-d3607d32bb58"

download.file(url = knb_url, destfile = here('shapefile_demo_data.zip'))

unzip(here('shapefile_demo_data.zip'), exdir = here('data'))

file.remove(here('shapefile_demo_data.zip'))
```

# Exploring data with plot() and st_crs()

```{r}
 # read in shapefile using read_sf()

ak_rgns_sf <- read_sf(here("data/ak_regions_simp.shp"))

plot(ak_rgns_sf)

class(ak_rgns_sf)

head(ak_rgns_sf)

glimpse(ak_rgns_sf)
```

## st_crs() to get a crs

```{r}
st_crs(ak_rgns_sf)
```

## st_transform() to transform the crs

```{r}
ak_rgns_3338_sf <- ak_rgns_sf %>%
  st_transform(crs = 3338)

st_crs(ak_rgns_3338_sf)

plot(ak_rgns_3338_sf)
```

## filter()
```{r}
#get values in region colmn
unique(ak_rgns_3338_sf$region)

ak_rgns_3338_sf %>%
  filter(region == "Southeast")
```

## select()
```{r}
colnames(ak_rgns_3338_sf)

ak_rgns_3338_sf %>%
  select(region)
```

# Spatial joins 

## read in new data
```{r}
pop_df <-  read_csv(here("data/alaska_population.csv"))

head(pop_df)
```

## convert data frame to a spatial object
```{r}
pop_4326_sf <- st_as_sf(pop_df,
                        coords = c('lng', 'lat'),
                        crs = 4326, 
                        remove = F) 

head(pop_4326_sf)
```

## joining data with st_join
```{r}
#pop_join_sf <- st_join(pop_4326_sf,
#                       ak_rgns_3338_sf,
#                      join = st_within)

# transform the pop data
pop_3338_sf <- st_transform(pop_4326_sf,
                            crs = 3338)

pop_join_sf <- st_join(pop_3338_sf,
                      ak_rgns_3338_sf,
                     join = st_within)

head(pop_join_sf)
```

## calculate total population using group_by() and summarize()
```{r}
pop_rgn_df <- pop_join_sf %>%
  st_drop_geometry() %>%
  group_by(region) %>%
  summarize(total_pop = sum(population))

head(pop_rgn_df)
```

## left_join() to merge back into spatial object
```{r}
pop_rgn_3338_sf <- left_join(ak_rgns_3338_sf, pop_rgn_df, by = "region")

head(pop_rgn_3338_sf)
```

## plot population by management area 
```{r}
pop_mgmt_3338_sf_bad <- pop_rgn_3338_sf %>%
  group_by(mgmt_area) %>%
  summarize(total_pop = sum(total_pop), do_union = T)

plot(pop_mgmt_3338_sf_bad["total_pop"])
```

```{r}
pop_mgmt_3338_sf <- pop_rgn_3338_sf %>%
  group_by(mgmt_area) %>%
  summarize(total_pop = sum(total_pop), do_union = F)

plot(pop_mgmt_3338_sf["total_pop"])
```

## save the sf object with write_sf()
```{r}
write_sf(pop_rgn_3338_sf,
         here("data/ak_region_population.shp"))

```

# Visualize with ggplot using geom_sf()
```{r}
# plot population by region 
ggplot(pop_rgn_3338_sf) +
  geom_sf(aes(fill = total_pop)) +
  labs(fill = "Total Population") +
  scale_fill_continuous(low = "black" ,
                        high = "lightblue",
                        labels = label_comma()) +
  theme_bw()

```

## multiple shapefiles on the same plot 
```{r}
# load in rivers dataset

rivers_3338_sf <- read_sf(here("data/ak_rivers_simp.shp"))
head(rivers_3338_sf)

st_crs(rivers_3338_sf)

ggplot() +
  geom_sf(data = pop_rgn_3338_sf,
          aes(fill = total_pop)) +
  geom_sf(data = pop_3338_sf,
          size = 0.5)+
  geom_sf(data = rivers_3338_sf,
          aes(linewidth = StrOrder)) +
  scale_linewidth(range = c(0.05, 0.5), 
                  guide = "none") +
  scale_fill_continuous(labels = label_comma()) +
  labs(title = "Total Population by Alaska Region",
       fill = "Total Population") +
  theme_bw()
```

```{r}
pop_3857_sf <- st_transform(pop_3338_sf, 
                         crs = 3857)

ggplot(data = pop_3857_sf) +
    ggspatial::annotation_map_tile(type = "osm", zoom = 4, progress = 'none') + # higher zoom values are more detailed 
    geom_sf(aes(color = population),
            fill = NA) +
    scale_color_continuous(low = "darkkhaki",
                           high =  "firebrick",
                           labels = comma)
```

# sf objects with leaflet

- expected lat/lon WGS84
- in order to display with different projection, but define a custom crs 

1. Create custom Alaska Albers projection
```{r}
epsg3338 <- leaflet::leafletCRS(    
  crsClass = "L.Proj.CRS",
    code = "EPSG:3338",
    proj4def =  "+proj=aea +lat_1=55 +lat_2=65 +lat_0=50 +lon_0=-154 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs",
    resolutions = 2 ^ (16:7)
  )

```

2. Create unprojected WEGS84 sf object
```{r}
pop_rgn_4326_sf <- pop_rgn_3338_sf %>%
  st_transform(crs = 4326)

st_crs(pop_rgn_4326_sf)
```
3. Create leaflet map
```{r}
m <- leaflet(options = leafletOptions(crs = epsg3338)) %>%
  addPolygons(data = pop_rgn_4326_sf,
              fillColor = "gray",
              weight = 1)
m
```

4. Customize
```{r}
# create color palette for total population 
pal <- colorNumeric(palette = "Reds", domain = pop_rgn_4326_sf$total_pop)

m <- leaflet(options = leafletOptions(crs = epsg3338)) %>%
    addPolygons(
        data = pop_rgn_4326_sf,
        fillColor = ~ pal(total_pop),
        weight = 1,
        color = "black",
        fillOpacity = 1
    ) %>%
    addCircleMarkers(
        data = pop_4326_sf,
        lat = ~ lat,
        lng = ~ lng,
        radius = ~ log(population / 500),
        # arbitrary scaling
        fillColor = "gray",
        fillOpacity = 1,
        weight = 0.25,
        color = "black",
        label = ~ paste0(pop_4326_sf$city, ", population ", comma(pop_4326_sf$population))
    ) %>%
    addLegend(
        position = "bottomleft",
        pal = pal,
        values = range(pop_rgn_4326_sf$total_pop),
        title = "Total Population"
    )

m
```

